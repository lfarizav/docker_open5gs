; extensions.conf - the Asterisk dial plan
;
; Static extension configuration file, used by
; the pbx_config module. This is where you configure all your
; inbound and outbound calls in Asterisk.
;
; This configuration file is reloaded
; - With the "dialplan reload" command in the CLI
; - With the "reload" command (that reloads everything) in the CLI

;
; The "General" category is for certain variables.
;
[general]
;
; If static is set to no, or omitted, then the pbx_config will rewrite
; this file when extensions are modified.  Remember that all comments
; made in the file will be lost when that happens.
;
; XXX Not yet implemented XXX
;
static=yes
;
; if static=yes and writeprotect=no, you can save dialplan by
; CLI command "dialplan save" too
;
writeprotect=yes
;
; If autofallthrough is set, then if an extension runs out of
; things to do, it will terminate the call with BUSY, CONGESTION
; or HANGUP depending on Asterisk's best guess. This is the default.
;
; If autofallthrough is not set, then if an extension runs out of
; things to do, Asterisk will wait for a new extension to be dialed
; (this is the original behavior of Asterisk 1.0 and earlier).
;
;autofallthrough=no
;
;
;
; If extenpatternmatchnew is set (true, yes, etc), then a new algorithm that uses
; Trie
extenpatternmatchnew=no
;
; If clearglobalvars is set, global variables will be cleared
; and reparsed on a dialplan reload, or Asterisk reload.
;
; If clearglobalvars is not set, then global variables will persist
; through reloads, and even if deleted from the extensions.conf or
; one of its included files, will remain set to the previous value.
;
; NOTE: A complication sets in, if you put your global variables into
; the AEL file, instead of the extensions.conf file. With clearglobalvars
; set, a "reload" will often leave the globals vars cleared, because it
; is not unusual to have extensions.conf (which will have no globals)
; load after the extensions.ael file (where the global vars are stored).
; So, with "reload" in this particular situation, first the AEL file will
; clear and then set all the global vars, then, later, when the extensions.conf
; file is loaded, the global vars are all cleared, and then not set, because
; they are not stored in the extensions.conf file.
;
clearglobalvars=yes
;
; User context is where entries from users.conf are registered.  The
; default value is 'default'
;
userscontext=unspecified

; Below are some of the defined variables that will be used in the dialplan, which needs to be adjusted to your need.
; Below a German Trunk is being used hence the prefix used is +49. Adjust this based on your country. This is used during incoming calls and is assumed that provider sends only E164 numbers.
[globals]
INTERNAL_DIAL_OPT=,30
ENUM_PREFIX_FOR_DE=+49

; Below is the head number. This needs to be changed based on the number provided by your provider. The head number consists of 10 digits. We will cut the head number and normalize it before it enters the IMS Core.
; There are various names for head number like direct dial in, prefix numbers, etc. It's basically the number from your SIP Trunk Provider that can be extended by adding digits to it.

PHONE_NR_HEAD=1234567890

; Don't change
ICP_OUT=ICP_LINK_out
ICP_IN=ims_core
; change to your provider's provided domain
SIPTRUNK_DOMAIN=PROVIDER_DOMAIN
; Don't change
IMS_CN_DOMAIN=IMS_DOMAIN
PAI_HEADER=P-Asserted-Identity
PPI_HEADER=P-Preferred-Identity
NO_FORK=Request-Disposition
P_HEADER=P-Early-Media
X_HEADER=P-MeinSipTrunk

; Dialplan
; Below is an explanation about the process by which calls are sent to and received from (from outside world) the IMS Core.
; In "incoming" section below, an internal MSISDN (0912584710) assigned in the private network is being used.
; In real world deployments, a shared database is maintained by all operators in order to know to which specific operator the number belongs to. But in our case the network is private and our numbers are unknown to the outside world. So a trick is needed to make the calls work. This trick consists of combining the head number provided by SIP Trunk provider and the UE MSISDN as specified below:
; CC+HEADER_NUMBER+MSISDN = +49 228 1234567 0912584710 and then cut or add the CC+HEADER_NUMBER depending on the direction. If the direction is towards the IMS Core, cut CC+HEADER_NUMBER. If the direction is towards the outside world then add CC+HEADER_NUMBER.
; ${EXTEN:n} is used to achieve this slicing of numbers, where "n" is the digit that needs to stay along with the digits that come after it. 
; In the below case it's the number after 0 and including 0, so 0912584710 will be recognized inside my private network. This needs to be adjusted depending on your needs like the length of your head number and your MSISDN.
; After doing that we need to send the call to the ICSCF as we don't know where the user is registered, the rest will be done inside the IMS Core+Open5GS.
;
; It's preconfigured below on digit 13 (UK users please change it! not to trigger any bad luck!).


[incoming]

;              +49               228 1234567   + any
exten => _${ENUM_PREFIX_FOR_DE}${PHONE_NR_HEAD}X.,1,Verbose(incoming call from ICP from ${CALLERID(num)} calling to ${EXTEN:13})
same => n,Verbose(check for exten ${EXTEN} 8 ${EXTEN:8} 9 ${EXTEN:9} 10 ${EXTEN:10} 11 ${EXTEN:11} 13 ${EXTEN:13} )
; Cutting until digit 13               CUT 0912584710
; Set some headers and send to icscf to reach the users.
same => n,Dial(PJSIP/${ICP_IN}/sip:${EXTEN:13}@${IMS_CN_DOMAIN},120,b(outgoing^ims_inc^1))
same => n,Hangup()

[outgoing]

; Devices can usually perform calls in two ways i.e. either the call will start with 0 (in the IMS is not possible) or with + before the dialing number.

; Below is for the scenario where there is 0 before the dialing number. This is not applicable since IMS is 3GPP compatible and the dialed number follows E164 standards.
exten => _0X.,1,Verbose(outgoing context leading null ${EXTEN} calling from IMS User ${CALLERID(num)} )
same => n,Dial(PJSIP/${ICP_OUT}/sip:${ENUM_PREFIX_FOR_DE}${EXTEN:1}@${SIPTRUNK_DOMAIN},120,b(outgoing^headers^1))
same => n,Hangup()

; Below is for the scenario where there is + before the dialing number.And, this is the one being used since we use E164 in IMS.
exten => _${ENUM_PREFIX_FOR_DE}X.,1,Verbose(outgoing Call leading +49 calling from IMS User ${CALLERID(num)} to ${EXTEN} )
same => n,Verbose(Sending INVITE to ICP)
; we set the head number and add the MSISDN to it then set it in the "From" header
same => n,Set(CALLERID(num)=${ENUM_PREFIX_FOR_DE}${PHONE_NR_HEAD}${CALLERID(num)})
; Setting some headers and sends the INVITE to the Provider/ICP
same => n,Dial(PJSIP/${ICP_OUT}/sip:${EXTEN}@${SIPTRUNK_DOMAIN},120,b(outgoing^ims_out^1))
same => n,Hangup()

; Below headers are sed in outgoing.
exten => ims_out,1,Verbose(Setting required headers in outgoing INVITE)
; Set the P-Preferred-Identity and optionally P-Preferred-Identity (PAI is only a Network thing).
; Adding the MSISDN to the head number before sending it out.
same => n,Set(PJSIP_HEADER(add,${PPI_HEADER})=<sip:${ENUM_PREFIX_FOR_DE}${PHONE_NR_HEAD}${CONNECTEDLINE(num)}@${SIPTRUNK_DOMAIN}>)
same => n,Set(PJSIP_HEADER(add,${PAI_HEADER})=<sip:${ENUM_PREFIX_FOR_DE}${PHONE_NR_HEAD}${CONNECTEDLINE(num)}@${SIPTRUNK_DOMAIN}>)
; Set the P-Early-Media to supported.
; Asterisk knows nothing about RFC5009, but it's required by 3GPP so we add it as hack.
same => n,Set(PJSIP_HEADER(add,${P_HEADER})=Supported)
same => n,Set(PJSIP_HEADER(add,Supported)=199)
same => n,Return()

; For incoming we need to set the PAI since some devices need this header.
exten => ims_inc,1,Verbose(Setting required headers in incoming INVITE)
same => n,Set(PJSIP_HEADER(add,${PAI_HEADER})=<tel:${CONNECTEDLINE(num)}>)
same => n,Set(PJSIP_HEADER(add,${PAI_HEADER})=<sip:${CONNECTEDLINE(num)}@${IMS_CN_DOMAIN}>)
same => n,Set(PJSIP_HEADER(add,${P_HEADER})=Supported)
same => n,Set(PJSIP_HEADER(add,Supported)=199)
same => n,Return()

[IMS_INC]

include => outgoing

; Voicemail IMS is a WIP.
; Need to add appropriate IFC for it, don't forget to configure your MSISDN in the voicemail.conf.

; Configure the start of your number instead of "09125" e.g. if your MSISDN starts with 09125123456 then exten => _09125X.
exten => _09125X.,1,Verbose(1, Caller ${CALLERID(all)} has entered Voicemail for ${EXTEN} from IMS )
same => n,VoiceMail(${EXTEN})

exten => 500,1,Ringing()
exten => 500,n,Wait(2)
exten => 500,n,Answer
exten => 500,n,Wait(2)
exten => 500,n,VoiceMailMain(${CALLERID(num)})
exten => 500,n,HangUp()
exten => 500,n,PlayBack(vm-goodbye)
exten => 500,n,HangUp()
